AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for messaging demo with EC2, SQS, and SNS'

Parameters:
  MyIpAddress:
    Description: Your IP address for SSH access (x.x.x.x/32)
    Type: String
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}/32$'
  EmailAddress:
    Description: Email address for SNS notifications
    Type: String
    Default: user@example.com

Resources:
  # VPC and Networking Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: MessagingDemoVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MessagingDemoIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: MessagingDemoPublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MessagingDemoPublicRT

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for messaging demo instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIpAddress
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  # SQS Queue
  MessagingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: messaging-demo-queue
      VisibilityTimeout: 30

  # SNS Topic and Subscription
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: messaging-demo-notifications

  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref NotificationTopic
      Endpoint: !Ref EmailAddress

  # IAM Roles and Instance Profiles
  ProducerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: messaging-demo-producer-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ProducerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt MessagingQueue.Arn

  ConsumerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: messaging-demo-consumer-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ConsumerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource: !GetAtt MessagingQueue.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic

  ProducerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ProducerRole

  ConsumerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ConsumerRole

  # EC2 Instances
  ProducerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref ProducerInstanceProfile
      Tags:
        - Key: Name
          Value: MessagingDemoProducer
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y aws-cli
          
          QUEUE_URL="${MessagingQueue}"
          
          cat <<EOF > /usr/local/bin/producer.sh
          #!/bin/bash
          while true; do
            TIMESTAMP=\$(date +"%Y-%m-%d %H:%M:%S")
            MESSAGE="Message sent from producer at \$TIMESTAMP"
            aws sqs send-message --queue-url "$QUEUE_URL" --message-body "\$MESSAGE"
            sleep 30
          done
          EOF
          
          chmod +x /usr/local/bin/producer.sh
          nohup /usr/local/bin/producer.sh > /var/log/producer.log 2>&1 &

  ConsumerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref ConsumerInstanceProfile
      Tags:
        - Key: Name
          Value: MessagingDemoConsumer
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y aws-cli jq
          
          QUEUE_URL="${MessagingQueue}"
          TOPIC_ARN="${NotificationTopic}"
          
          cat <<EOF > /usr/local/bin/consumer.sh
          #!/bin/bash
          while true; do
            RESPONSE=\$(aws sqs receive-message --queue-url "$QUEUE_URL" --max-number-of-messages 1 --wait-time-seconds 10)
            MESSAGE_BODY=\$(echo "\$RESPONSE" | jq -r '.Messages[0].Body')
            RECEIPT_HANDLE=\$(echo "\$RESPONSE" | jq -r '.Messages[0].ReceiptHandle')
          
            if [[ "\$MESSAGE_BODY" != "null" ]]; then
              echo "Processing: \$MESSAGE_BODY"
              aws sqs delete-message --queue-url "$QUEUE_URL" --receipt-handle "\$RECEIPT_HANDLE"
              aws sns publish --topic-arn "$TOPIC_ARN" --message "Processed message: \$MESSAGE_BODY"
            fi
            sleep 5
          done
          EOF
          
          chmod +x /usr/local/bin/consumer.sh
          nohup /usr/local/bin/consumer.sh > /var/log/consumer.log 2>&1 &

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0cff7528ff583bf9a
    us-east-2:
      AMI: ami-02d1e544b84bf7502
    us-west-1:
      AMI: ami-0d9858aa3c6322f73
    us-west-2:
      AMI: ami-098e42ae54c764c35

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC

  PublicSubnetId:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet

  QueueURL:
    Description: URL of the SQS Queue
    Value: !Ref MessagingQueue

  QueueARN:
    Description: ARN of the SQS Queue
    Value: !GetAtt MessagingQueue.Arn

  TopicARN:
    Description: ARN of the SNS Topic
    Value: !Ref NotificationTopic

  ProducerInstanceId:
    Description: Instance ID of the Producer
    Value: !Ref ProducerInstance

  ConsumerInstanceId:
    Description: Instance ID of the Consumer
    Value: !Ref ConsumerInstance